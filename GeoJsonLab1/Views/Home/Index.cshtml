@model GeoJsonLab1.Models.IndexViewModel
@{
    ViewData["Title"] = "Home Page";
}
<style>
    path {
        fill: lightgray;
        stroke: #000;
    }

    .graticule {
        fill: none;
        stroke: #ccc;
        stroke-width: .5px;
    }

    .foreground {
        fill: none;
        stroke: #333;
        stroke-width: 1.5px;
    }
</style>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script src="https://d3js.org/topojson.v2.min.js"></script>
<datalist id="countries-data-list">
     @foreach(var country in Model.Countries)
     {
        <option value="@country.Code">@country.Name</option>
     }
</datalist>
<div class="text-center">
    <h1 class="display-4">GeoJson/d3</h1>
    <p></p>
</div>
<div class="row">
    <div class="col mb-2">
        <label for="countriesList">Select a country</label>
        <input list="countries-data-list" id="countriesList" onchange="renderCountry(this.value)">
    </div>
</div>
<div class="row">
    <div class="col p-3">
        <svg width="960" height="600"></svg>
    </div>
</div>
<script>
const svg = d3.select("svg")
const myProjection = d3.geoNaturalEarth1()
const path = d3.geoPath().projection(myProjection)
const graticule = d3.geoGraticule()

function drawMap(err, country) {
    if (err) throw err

    svg.append("path")
        .datum(graticule)
        .attr("class", "graticule")
        .attr("d", path);

    svg.append("path")
        .datum(graticule.outline)
        .attr("class", "foreground")
        .attr("d", path);

    svg.append("g")
        .selectAll("path")
        .data([country])
        .enter().append("path")
        .attr("d", path);
}

function renderCountry(cc) {
    d3.json("/GeoJson/" + cc + ".json", drawMap);
}
</script>
