@model GeoJsonLab1.Models.AfricaViewModel
@{
    ViewData["Title"] = "African countries";
}
<script src="https://d3js.org/d3.v4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/openlayers@4.6.5/dist/ol.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/openlayers@4.6.5/dist/ol.min.css" rel="stylesheet">
<div class="text-center top-margin">
    <h4>Countries in Africa</h4>
</div>
<div class="row">
    <div class="col-sm-12 col-md-4">
        <div class="form-group">
            <label for="continentsList">Select a continent</label><br />
            <select id="continentsList" class="form-control">
            </select>
        </div>
    </div>
    <div class="col-sm-12 col-md-4">
        <div class="form-group">
            <label for="regionsList">Select a region</label><br />
            <select id="regionsList" class="form-control">
            </select>
        </div>
    </div>
    <div class="col-sm-12 col-md-4">
        <div class="form-group">
            <label for="regionsList">Select a country</label><br />
            <select id="countriesList" class="form-control">
        </select>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-8 col-sm-12 p-3">
        <svg viewBox="0 0 960 600"
             preserveAspectRatio="xMidYMid meet"></svg>
    </div>
    <div class="col-md-4 col-sm-12 bg-light border border-dark rounded shadow p-2">
        @{
            await Html.RenderPartialAsync("CountryFactsControl");
        }
    </div>
</div>
<div class="modal" tabindex="-1" role="dialog" id="capital-map">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">City map</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="mapdiv" style="height:450px;width:100%"></div>
            </div>''
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script>
    const svg = d3.select("svg");
    const graticule = d3.geoGraticule();
    var geo = {};

    $(document).ready(function () {
        //$('#continentsList').selectpicker();
        //$('#regionsList').selectpicker();
        //$('#countriesList').selectpicker();
        var continentsSelect = $('#continentsList');
        var regionsSelect = $('#regionsList');
        var countriesSelect = $('#countriesList');
        $.getJSON("/miscdata/geo-hierarchy.json", function (data){
            geo = data;
            continentsSelect.html('');
            for(let continentIx = 0; continentIx < geo.continents.length;continentIx++){
                let continent = geo.continents[continentIx];
                continentsSelect.append('<option value="' + continentIx + '">' + continent.name + '</option>');
            }
            //continentsSelect.selectpicker('refresh');
            loadRegions(0);
            loadCountries(0, 0);
            let cc3 = geo.continents[0].regions[0].countries[0].code3;
            let cc2 = geo.continents[0].regions[0].countries[0].code2;
            renderCountry(cc3, cc2);
        });
        
        
        $('#countriesList').change(function () {
            let ctIx = $("#continentsList option:selected").index();
            let rIx = $("#regionsList option:selected").index();
            let ctryIx = $("#countriesList option:selected").index()
            let country = geo.continents[ctIx].regions[rIx].countries[ctryIx];
            renderCountry(country.code3, country.code2);;
        });
        $('#continentsList').change(function () {
            loadRegions(parseInt($(this).val()));
            loadCountries(parseInt($(this).val(), 0));
        });
         $('#regionsList').change(function () {
            loadCountries($("#continentsList option:selected").index(), parseInt($("#regionsList option:selected").val()));
        });
        
    });

    function loadRegions(continentIx){
        var continent = geo.continents[continentIx];
        var regionsSelect = $('#regionsList');
        regionsSelect.html('');
        for(let regionIx = 0; regionIx < continent.regions.length;regionIx++){
            let region = continent.regions[regionIx];
            regionsSelect.append('<option value="' + regionIx + '">' + region.name + '</option>');
        }
        //regionsSelect.selectpicker('refresh');
    }

    function loadCountries(continentIx, regionIx){
        if(regionIx === undefined) regionIx=0;
        var continent = geo.continents[continentIx];
        var region = continent.regions[regionIx];
        var countriesSelect = $('#countriesList');
        countriesSelect.html('');
        for (let countryIx = 0; countryIx < region.countries.length; countryIx++) {
            let country = region.countries[countryIx];
            countriesSelect.append('<option value="' + country.code + '">' + country.name + '</option>');
        }
        //countriesSelect.selectpicker('refresh');
    }
</script>
